{"version":3,"sources":["lib/Api.js","lib/GiphyApi.js","giphyList/giphyListSlice.js","giphyList/GiphySearch.jsx","components/InfiniteList.jsx","giphyList/Giphy.jsx","giphyList/GiphyDetail.jsx","giphyList/GiphyList.jsx","rootReducer.js","store.js","index.jsx","App.jsx"],"names":["Api","apiRoot","apiUrl","path","test","startsWith","slice","validateUrl","url","Error","sendRequest","verb","data","a","async","response","requestPath","fetch","headers","method","body","JSON","stringify","json","responseBody","ok","console","error","status","statusText","message","get","params","current","qs","parseUrl","newParams","query","newUrl","this","endsWith","GIPHY_ROOT","GIPHY_API_KEY","process","SEARCH_RESULT_LIMIT","TRENDING_RESULT_LIMIT","warn","GiphyApi","getSearchPath","searchText","offset","getTrending","pageSize","api_key","limit","rating","search","q","lang","resetList","state","criteria","items","giphies","createSlice","name","initialState","totalMatches","detailGiphy","isLoading","isLoadingNextPage","loadFailed","reducers","action","payload","clearSearch","loadNextPage","length","showTrending","giphiesLoaded","concat","giphiesLoadError","showDetail","hideDetail","actions","api","mapResults","results","pagination","total_count","GiphySearch","dispatch","useDispatch","useSelector","useState","searchBoxText","setSearchBoxText","debounce","newSearch","debouncedSearch","searchBox","useRef","Input","size","placeholder","icon","Icon","className","onClick","focus","value","onChange","e","ref","autoFocus","InfiniteList","renderItem","onReachedBottom","loadingText","isLoadingMore","useEffect","window","onscroll","innerHeight","document","documentElement","scrollTop","scrollHeight","loader","Loader","active","inline","map","item","Header","Giphy","Image","src","images","fixed_height_still","title","alt","as","href","id","preventDefault","stopPropagation","GiphyDetail","hideModal","Modal","open","onClose","original","GiphyList","trendingResponse","toString","loadTrending","searchResponse","searchGiphy","key","rootReducer","combineReducers","giphiesReducer","store","configureStore","reducer","ReactDOM","render","Grid","Column","width","getElementById"],"mappings":"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","file":"static/js/main.66a677f4.chunk.js","sourcesContent":["import qs from \"query-string\";\n\nexport class Api {\n\n    constructor(apiRoot = '') {\n        this.apiRoot = !apiRoot.endsWith('/') ? apiRoot + '/' : apiRoot;\n    }\n\n    apiUrl = path => {\n        return /^https?:/i.test(path) ? path : `${this.apiRoot}${path.startsWith('/') ? path.slice(1) : path}`;\n    }\n\n    validateUrl = url => {\n        if (!url || typeof url !== 'string') {\n            throw new Error('Need to supply a string URL for request.');\n        }\n    }\n\n    sendRequest = async (verb, url, data) => {\n        let response = null;\n\n        try {\n            const requestPath = this.apiUrl(url);\n            response = await fetch(requestPath, {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Accept\": \"application/json\",\n                },\n                method: verb,\n                body: !data\n                    ? null\n                    : typeof data === \"string\"\n                        ? data\n                        : JSON.stringify(data)\n            });\n\n            const responseBody = await response.json();\n            if (!response.ok) {\n                console.error(\n                    `Problem processing request. Status: ${response.status} - ${\n                    response.statusText\n                    }`,\n                    responseBody\n                );\n            }\n            return responseBody;\n        } catch (ex) {\n            let message = \"Unexpected error fetching API response.\";\n            if (!response) {\n                message += \" Couldn't get a response from API. Is it running?\";\n            }\n            console.error(message, ex);\n        }\n    }\n\n    get = async (url, params) => {\n        this.validateUrl(url);\n        const current = qs.parseUrl(url);\n        const newParams = {\n            ...current.query,\n            ...params,\n        };\n\n        const newUrl = current.url + '?' + qs.stringify(newParams);\n\n        return await this.sendRequest(\"GET\", newUrl);\n    }\n\n}\n\n","import { Api } from \"./Api\";\n\nconst GIPHY_ROOT = 'https://api.giphy.com/v1/gifs/';\nconst GIPHY_API_KEY = process.env.REACT_APP_GIFFY_API_KEY || '';\nconst SEARCH_RESULT_LIMIT = 25;\nconst TRENDING_RESULT_LIMIT = SEARCH_RESULT_LIMIT;\n\nif (!GIPHY_API_KEY) {\n    console.warn('Cannot find GIPHY API key. Queries will fail.');\n}\n\nexport class GiphyApi extends Api {\n    constructor() {\n        super(GIPHY_ROOT);\n    }\n\n    getSearchPath = (searchText, offset = 0) => `search?api_key=${GIPHY_API_KEY}&q=${searchText}&limit=${SEARCH_RESULT_LIMIT}&offset=${offset}&rating=G&lang=en`;\n\n    getTrending = async (offset = 0, pageSize = TRENDING_RESULT_LIMIT) => {\n        return this.get('trending', {\n            api_key: GIPHY_API_KEY,\n            limit: pageSize,\n            offset,\n            rating: 'G',\n        })\n    }\n\n    search = async (searchText, offset = 0, pageSize = SEARCH_RESULT_LIMIT) => {\n        return this.get('search', {\n            api_key: GIPHY_API_KEY,\n            q: searchText,\n            limit: pageSize,\n            offset,\n            rating: 'G',\n            lang: 'en',\n        })\n    }\n\n\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { GiphyApi } from \"../lib/GiphyApi\";\n\nconst PAGE_SIZE = 25;\n\nconst initialState = {\n    criteria: {\n        searchText: '',\n        offset: 0,\n    },\n    totalMatches: 0,\n    items: [],\n    detailGiphy: null,\n    isLoading: true,\n    isLoadingNextPage: false,\n    loadFailed: false,\n};\n\nconst resetList = state => {\n    state.criteria.offset = 0;\n    state.items = [];\n}\n\nconst giphies = createSlice({\n    name: 'giphies',\n    initialState,\n    reducers: {\n        search: (state, action) => {\n            state.isLoading = true;\n            state.criteria.searchText = action.payload;\n            resetList(state);\n        },\n        clearSearch: (state, action) => {\n            state.isLoading = true;\n            state.criteria.searchText = '';\n            resetList(state);\n        },\n        loadNextPage: (state, action) => {\n            if (state.isLoading || state.isLoadingNextPage) {\n                return; // we don't want to load more until current set is loaded\n            }\n\n            if (state.items.length >= state.totalMatches) {\n                return; // we got all the ones we can get for current criteria\n            }\n\n            state.criteria.offset += PAGE_SIZE;\n            state.isLoadingNextPage = true;\n        },\n        showTrending: (state, action) => {\n            state.isLoading = true;\n            state.criteria.searchText = '';\n            resetList(state);\n        },\n        giphiesLoaded: (state, action) => {\n            state.totalMatches = action.payload.totalMatches;\n            state.items = state.items.concat(action.payload.items);\n            state.loadFailed = false;\n            state.isLoading = false;\n            state.isLoadingNextPage = false;\n        },\n        giphiesLoadError: (state, action) => {\n            state.items = [];\n            state.loadFailed = true;\n            state.isLoading = false;\n            console.error('Problem loading giphies:', action.payload);\n        },\n        showDetail: (state, action) => {\n            state.detailGiphy = action.payload;\n        },\n        hideDetail: (state, action) => {\n            state.detailGiphy = null;\n        },\n    }\n})\n\nexport const {\n    search,\n    clearSearch,\n    showTrending,\n    loadNextPage,\n    giphiesLoaded,\n    giphiesLoadError,\n    showDetail,\n    hideDetail\n} = giphies.actions;\n\nexport default giphies.reducer;\n\nconst api = new GiphyApi();\n\nconst mapResults = results => ({\n    totalMatches: results.pagination.total_count,\n    items: results.data\n})\n\nexport const loadTrending = (offset = 0) => async dispatch => {\n    try {\n        const trendingResponse = await api.getTrending(offset, PAGE_SIZE);\n        dispatch(giphiesLoaded(mapResults(trendingResponse)));\n    } catch (ex) {\n        dispatch(giphiesLoadError(ex.toString()));\n    }\n}\n\nexport const searchGiphy = (searchText, offset = 0) => async dispatch => {\n    try {\n        const searchResponse = await api.search(searchText, offset, PAGE_SIZE);\n        dispatch(giphiesLoaded(mapResults(searchResponse)));\n    } catch (ex) {\n        dispatch(giphiesLoadError(ex.toString()));\n    }\n}\n\n","import React, { useState, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Input, Icon } from 'semantic-ui-react';\nimport debounce from 'lodash/debounce';\n\nimport \"./GiphySearch.css\";\nimport { search, clearSearch } from \"./giphyListSlice\";\n\nexport const GiphySearch = () => {\n    const dispatch = useDispatch();\n    const { searchText } = useSelector(state => state.giphies.criteria);\n    const [searchBoxText, setSearchBoxText] = useState(searchText);\n    // useState will immediately invoke if given a function, so we wrap it\n    // we use useState here so the debounced func will be created 1x for the component\n    const [debouncedSearch] = useState(() => debounce(newSearch => dispatch(search(newSearch)), 500));\n    const searchBox = useRef(null);\n\n    const onSearchChanged = (e, { value }) => {\n        setSearchBoxText(value);\n        debouncedSearch(value)\n    }\n\n    const resetSearch = () => {\n        dispatch(clearSearch());\n        setSearchBoxText('');\n        if (searchBox.current) {\n            searchBox.current.focus();\n        }\n    }\n\n    return (\n        <Input\n            size=\"massive\"\n            placeholder=\"type to search giphies\"\n            icon={searchText !== '' ?\n                <Icon name=\"x\" className=\"link\" onClick={resetSearch} />\n                : <Icon name=\"search\" />\n            }\n            className=\"search-box\"\n            value={searchBoxText}\n            onChange={onSearchChanged}\n            ref={searchBox}\n            autoFocus\n        />\n    );\n}\n","import React, { useEffect } from 'react';\nimport { Header, Loader } from 'semantic-ui-react';\nimport debounce from 'lodash/debounce';\n\nexport const InfiniteList = ({ items, renderItem, onReachedBottom, isLoading = true, loadingText, isLoadingMore = false }) => {\n    useEffect(() => {\n        window.onscroll = debounce(() => {\n            if ((window.innerHeight + document.documentElement.scrollTop) >= document.body.scrollHeight) {\n                if (typeof onReachedBottom === 'function') {\n                    onReachedBottom();\n                }\n            }\n        }, 100);\n    }, [onReachedBottom]);\n\n    const loader = <Loader active inline='centered'>{loadingText}</Loader>;\n\n    return (isLoading ? loader : (\n        items && items.length > 0 ?\n            <div>\n                {items && items.map(item => renderItem(item))}\n                {isLoadingMore && loader}\n            </div>\n            : <Header>No matching giphies. Try again!</Header>\n    ));\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Image } from 'semantic-ui-react';\n\nimport { showDetail } from \"./giphyListSlice\";\n\nexport const Giphy = ({ data }) => {\n    const dispatch = useDispatch();\n\n    const onSelect = e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        dispatch(showDetail(data));\n    }\n\n    return (\n        <Image\n            src={data.images.fixed_height_still.url}\n            title={data.title}\n            alt={data.title}\n            as='a'\n            href={`#${data.id}`}\n            onClick={onSelect}\n        />\n    );\n}\n","import React from 'react';\nimport { Modal, Image } from 'semantic-ui-react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport \"./GiphyDetail.css\";\nimport { hideDetail } from \"./giphyListSlice\";\n\nexport const GiphyDetail = () => {\n    const dispatch = useDispatch();\n    const { detailGiphy } = useSelector(state => state.giphies);\n\n    const hideModal = () => {\n        dispatch(hideDetail());\n    }\n\n    return (\n        <Modal\n            open={!!detailGiphy}\n            onClose={hideModal}\n            className=\"giphy-detail\"\n            onClick={hideModal}\n        >\n            {detailGiphy &&\n                <div className=\"giphy-detail-image-container\">\n                    <Image\n                        src={detailGiphy.images.original.url}\n                    />\n                </div>\n            }\n        </Modal>)\n}","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Header } from \"semantic-ui-react\";\n\nimport \"./GiphyList.css\";\nimport { loadTrending, searchGiphy, loadNextPage } from \"./giphyListSlice\";\nimport { InfiniteList } from \"components/InfiniteList\";\nimport { Giphy } from './Giphy';\nimport { GiphyDetail } from './GiphyDetail';\n\n\nexport const GiphyList = () => {\n    const dispatch = useDispatch();\n    const { searchText, offset } = useSelector(state => state.giphies.criteria);\n    const { items, isLoading, isLoadingNextPage, totalMatches } = useSelector(state => state.giphies);\n\n    useEffect(() => {\n        if (searchText === '') {\n            dispatch(loadTrending(offset));\n        } else {\n            dispatch(searchGiphy(searchText, offset));\n        }\n    }, [searchText, offset, dispatch]);\n\n\n    return (\n        <>\n            <InfiniteList\n                isLoading={isLoading}\n                isLoadingMore={isLoadingNextPage}\n                loadingText=\"Finding your giphies...\"\n                renderItem={item => <Giphy key={item.id} data={item} />}\n                items={items}\n                onReachedBottom={() => dispatch(loadNextPage())}\n            />\n            {items.length > 0 && items.length >= totalMatches && <Header className=\"end-of-list\">That's all folks!</Header>}\n            <GiphyDetail />\n        </>\n    );\n}\n\n\n","import { combineReducers } from '@reduxjs/toolkit'\nimport giphiesReducer from \"./giphyList/giphyListSlice\";\n\nconst rootReducer = combineReducers({\n    giphies: giphiesReducer,\n})\n\nexport default rootReducer","import { configureStore } from '@reduxjs/toolkit'\nimport rootReducer from './rootReducer'\n\nconst store = configureStore({\n    reducer: rootReducer\n})\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n    module.hot.accept('./rootReducer', () => {\n        const newRootReducer = require('./rootReducer').default\n        store.replaceReducer(newRootReducer)\n    })\n}\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { App } from './App';\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n","import React from 'react';\nimport { Grid } from 'semantic-ui-react';\n\nimport './App.css';\nimport { GiphySearch } from \"./giphyList/GiphySearch\"\nimport { GiphyList } from \"./giphyList/GiphyList\";\n\nconst FULL_WIDTH_COLS = 16;\n\nexport const App = () => (\n  <Grid className=\"app-container\">\n    <Grid.Column width={FULL_WIDTH_COLS} className=\"searchBar\">\n      <GiphySearch />\n    </Grid.Column>\n    <Grid.Column width={FULL_WIDTH_COLS} className=\"giphies\">\n      <GiphyList />\n    </Grid.Column>\n  </Grid>\n);"],"sourceRoot":""}